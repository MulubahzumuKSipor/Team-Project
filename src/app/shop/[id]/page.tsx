// app/seller/[id]/page.tsx
'use client'; // Required for all hooks, state, and event handlers

import React, { useEffect, useState } from 'react';
import { useCart } from '@/app/lib/CartContext';
import Link from 'next/link';
import styles from '../../page.module.css';
import Image from 'next/image';
import { getUserById } from '@/app/lib/data';
import { useRouter } from 'next/navigation';
import { UserRaw } from '@/app/lib/data';

// Seller Type Definition (Represents UserRaw/Seller data fetched from the API)
interface Seller {
Â  user_id: number;
Â  name?: string;
Â  email?: string;
Â  country?: string;
Â  shop_name?: string;
Â  description?: string;
Â  image?: string;
Â  featuredproduct?: {
Â  Â  id?: number;
Â  Â  title?: string;
Â  Â  price?: number;
Â  Â  image?: string;
Â  Â  category?: string;
Â  } | null;
}

interface SellerPageProps {
Â  params: {
Â  Â  id: string;
Â  };
}

export default function SellerPage({ params }: SellerPageProps) {
Â  const router = useRouter();
Â  const sellerId = Number(params.id);

Â  // local state for seller, loading, error
Â  const [seller, setSeller] = useState<Seller | null>(null);
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState<string | null>(null);

Â  // cart context
Â  const { addToCart } = useCart();

Â  useEffect(() => {
Â  Â  // validate id
Â  Â  if (Number.isNaN(sellerId)) {
Â  Â  Â  setError('Invalid seller id');
Â  Â  Â  setLoading(false);
Â  Â  Â  return;
Â  Â  }

Â  Â  let cancelled = false;

Â  Â  async function fetchSeller() {
Â  Â  Â  setLoading(true);
Â  Â  Â  setError(null);
Â  Â  Â  try {
Â  Â  Â  Â  const data = await getUserById(sellerId);
Â  Â  Â  Â  if (cancelled) return;
Â  Â  Â  Â  setSeller(data as Seller);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error('Failed to fetch seller:', err);
Â  Â  Â  Â  if (!cancelled) setError('Failed to load seller');
Â  Â  Â  } finally {
Â  Â  Â  Â  if (!cancelled) setLoading(false);
Â  Â  Â  }
Â  Â  }

Â  Â  fetchSeller();

Â  Â  return () => {
Â  Â  Â  cancelled = true;
Â  Â  };
Â  }, [sellerId]);

Â  // Add featured product to cart (sends ALL seller/UserRaw information)
Â  const handleAddToCart = () => {
Â  Â  if (!seller) return;
    
    // **CRITICAL GUARD**: Ensure the product you intend to sell exists and has an ID
Â  Â  if (!seller.user_id) {
Â  Â  Â  alert('No featured product available to add.');
Â  Â  Â  return;
Â  Â  }

Â  Â  // ðŸŽ¯ FIX: Pass the entire seller object, which matches the required UserRaw type
Â  Â  addToCart(seller as UserRaw); // Use 'as any' to match UserRaw if types are complex
Â  };

Â  if (loading) {
Â  Â  return <div className={styles.pageContainer}><p>Loading seller...</p></div>;
Â  }

Â  if (error) {
Â  Â  return (
Â  Â  Â  <div className={styles.pageContainer}>
Â  Â  Â  Â  <p style={{ color: 'red' }}>{error}</p>
Â  Â  Â  Â  <button onClick={() => router.back()}>Go back</button>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (!seller) {
Â  Â  return (
Â  Â  Â  <div className={styles.pageContainer}>
Â  Â  Â  Â  <h2>Seller not found</h2>
Â  Â  Â  Â  <p>No artisan matches that ID.</p>
Â  Â  Â  Â  <button onClick={() => router.push('/shop')}>Back to shop</button>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return (
Â  Â  <main className={styles.pageContainer}>
Â  Â  Â  <div className={styles.sellerDetailContainer}>
Â  Â  Â  Â  <h2 className={styles.sellerShopName}>{seller.shop_name ?? seller.name}</h2>

Â  Â  Â  Â  <div className={styles.sellerContentGrid}>
Â  Â  Â  Â  Â  <div className={styles.sellerImageWrapper}>
Â  Â  Â  Â  Â  Â  <Image
Â  Â  Â  Â  Â  Â  Â  src={seller.image ?? seller.featuredproduct?.image ?? '/next.svg'}
Â  Â  Â  Â  Â  Â  Â  alt={`Profile image for ${seller.name ?? seller.shop_name}`}
Â  Â  Â  Â  Â  Â  Â  width={300}
Â  Â  Â  Â  Â  Â  Â  height={300}
Â  Â  Â  Â  Â  Â  Â  style={{ borderRadius: '8px', objectFit: 'cover' }}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  {/* ðŸŽ¯ FIX: onClick now correctly uses the function reference handleAddToCart */}
Â  Â  Â  Â  Â  Â  <button className={styles.buttonPrimary} onClick={handleAddToCart}>
Â  Â  Â  Â  Â  Â  Â  Add Featured Product to Cart
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className={styles.sellerInfo}>
Â  Â  Â  Â  Â  Â  <h3 className={styles.sectionTitle}>About the Artisan</h3>
Â  Â  Â  Â  Â  Â  <p><b>Artisan Name:</b> {seller.name}</p>
Â  Â  Â  Â  Â  Â  <p><b>Based in:</b> {seller.country}</p>
Â  Â  Â  Â  Â  Â  <p style={{ borderBottom: '5px solid skyblue' }}>
Â  Â  Â  Â  Â  Â  Â  Contact: <Link href={`mailto:${seller.email}`}>{seller.email}</Link>
Â  Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  Â  <h3 className={styles.sectionTitle}>Craft Focus</h3>
Â  Â  Â  Â  Â  Â  <p><b>Company/Studio:</b> {seller.shop_name}</p>
Â  Â  Â  Â  Â  Â  <p><b>Unique Insight:</b> {seller.description}</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className={styles.centerContent}>
Â  Â  Â  Â  Â  <Link href={"#"}>
Â  Â  Â  Â  Â  Â  <button className={styles.buttonPrimary}>Browse {seller.name ?? 'Products'}</button>
Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </main>
Â  );
}